#!/usr/bin/python

import time, logging
import ConfigParser, string
import signal, Queue
import textwrap

import tabnanny
import sys, os

import tweepy

MINUTE=60
VERSION = "0.0.1"

options = { "catch_hup" : True,
            "log_debug" : False,
            "text_wrap" : "auto",
            # value in minutes
            "update_frequency" : 5 }

# Custom exceptions

class MalformedKeyFile(Exception):
    def __init__(self):
        pass

class KeyFileNotFound(IOError):
    def __init__(self):
        pass

# Worker functions

# Try various means to find a terminal size, defaulting to 80x25 if not found.
# Taken from Chuck Blake's 'cls' program at http://pdos.csail.mit.edu/~cblake/cls/cls.py
def get_terminal_size():
    def ioctl_getwinsize(fd):
        try: ### Discover terminal width
            import fcntl, termios, struct, os
            cr = struct.unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ, '1234'))
        except:
            return None
        return cr

    ### decide on *some* terminal size
    # try open fds
    cr = ioctl_getwinsize(0) or ioctl_getwinsize(1) or ioctl_getwinsize(2)
    if not cr:
        # ...then ctty
        try:
            fd = os.open(os.ctermid(), os.O_RDONLY)
            cr = ioctl_getwinsize(fd)
            os.close(fd)
        except:
            pass
        if not cr:
            # env vars or finally defaults
            try:
                cr = (env['LINES'], env['COLUMNS'])
            except:
                cr = (25, 80)

    # reverse rows, cols
    return int(cr[1]), int(cr[0])

def is_number(string):
    try:
        dummy = int(string)
        return True
    except ValueError:
        return False

def get_wrap_width(opt, logger):
    logger.debug("get_wrap_width processing string '%s'", opt)
    tmp = string.lower(opt)
    width = 0
    if tmp == "auto":
        logger.info("Automatic wrap width, getting terminal size")
        width, height = get_terminal_size()
        logger.debug("Got %ix%i", width, height)
        # Think it looks better with a character 'border'
        width = width - 1
    elif is_number(tmp):
        logger.debug("Number '%s', using that", tmp)
        # If they've specified a number, don't adjust it.
        width = int(tmp)
    elif tmp == "off":
        logger.debug("tmp is 'off', leaving width at %i", width)
        logger.info("Word wrap is off.")
    else:
        logger.error("Invalid text_wrap value '%s'", tmp)
        raise ValueError, ("Invalid text_wrap value '%s'" % opt)

    return width

# Main functions

def setup_logging(name, log_debug=False):
    logger = logging.getLogger(name)
    if log_debug:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)
    # Create a file handler which even logs debug messages
    fh = logging.FileHandler(name + ".log")
    fh.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    fh.setFormatter(formatter)
    logging.getLogger('').addHandler(fh)
    return logger

def handler(signum, frame):
    local_logger = logging.getLogger("gribbit.handler")
    local_logger.info("Signal handler called, signum %i", signum)
    wakeup_queue.put(signum)

def apply_config(cfg, logger):
    # Process debug logging first so the other options get caught
    if cfg.has_option("gribbit", "log_debug"):
        logger.debug("Processing [%s, %s]" % ("gribbit", "log_debug"))
        options["log_debug"] = cfg.getboolean("gribbit", "log_debug")
        logger.info("Set options.log_debug to " + options["log_debug"].__str__())
        if options["log_debug"]:
            logger.setLevel(logging.DEBUG)
        else:
            logger.setLevel(logging.INFO)

    # Now do the others
    for section in cfg.sections():
        for option in cfg.options(section):
            if section != "gribbit" or option != "log_debug":
                logger.debug("Processing [%s, %s]" % (section, option))
            if section == "gribbit" and option == "catch_hup":
                options["catch_hup"] = cfg.getboolean(section, option)
                logger.info("Set options.catch_hup to " + options["catch_hup"].__str__())
            if section == "gribbit" and option == "text_wrap":
                options["text_wrap"] = get_wrap_width(cfg.get(section, option), logger)
                logger.info("Set text_wrap option to %i", options["text_wrap"])
            if section == "updates" and option == "frequency":
                options["update_frequency"] = cfg.getint(section, option)
                logger.info("Set options.update_frequency to %i", options["update_frequency"])
    
    # Default value, better populate it
    if options["text_wrap"] == "auto":
        options["text_wrap"] = get_wrap_width("auto", logger)
        logger.debug("Set text_wrap option to %i", options["text_wrap"])

def load_config(logger):
    cfg = ConfigParser.SafeConfigParser()
    cfgfiles = cfg.read(["gribbit.cfg", os.path.expanduser("~/.gribbit.cfg")])
    if len(cfgfiles) > 0:
        logger.info("Parsed config from " + string.join(cfgfiles, ', '))
        apply_config(cfg, logger)
    else:
        logger.info("No config files to load, using defaults")
        print "No config files to load, using defaults"

def load_keys(logger):
    cfg = ConfigParser.SafeConfigParser()
    cfgfiles = cfg.read("gribbit.keys")
    if len(cfgfiles) > 0:
        logger.info("Reading gribbit.keys")
        if cfg.has_section("keys"):
            auth = tweepy.OAuthHandler(cfg.get("keys", "consumer_key"), cfg.get("keys", "consumer_secret"))
            auth.set_access_token(cfg.get("keys", "access_token"), cfg.get("keys", "access_token_secret"))
            api = tweepy.API(auth)
            logger.info("Loaded keys from gribbit.keys")
        else:
            logger.critical("Malformed gribbit.keys file")
            raise MalformedKeyFile
    else:
        logger.critical("No gribbit.keys file")
        raise KeyFileNotFound

    return api

### Start program

# Set up logging and say we're starting
logger = setup_logging("gribbit", log_debug=options["log_debug"])
logger.info("gribbit %s starting up" % VERSION)

# Try to get the config files
try:
    load_config(logger)
except Exception, e:
    print "Error loading config file. Please check output and log file and fix the problem."
    print "Reported problem: ", string.join(e.args)
    sys.exit(1)

# Now try to load the Twitter keys.
try:
    api = load_keys(logger)
except MalformedKeyFile:
    print "Looks like gribbit.keys isn't correctly written. Please check"
    print "the documentation for the right format."
    sys.exit(1)
except KeyFileNotFound:
    print "Couldn't read gribbit.keys - please check the documentation for what to do."
    sys.exit(2)

# Queue is used for telling the main (and only) thread that a signal happened
wakeup_queue = Queue.Queue()
logger.debug("Created queue")

# Initial values
old_date = ""
last_id = -1

# If we're supposed to catch HUP then install the signal handler
if options["catch_hup"]:
    logger.debug("Installing HUP handler")
    old_handler = signal.signal(signal.SIGHUP, handler)

# The date + time take up 17 spaces. Make wrapped lines indent by that much too.
indent = " " * 17
if options["text_wrap"] > 0:
    w = textwrap.TextWrapper(width=options["text_wrap"], subsequent_indent=indent)

# If we hit an error at this stage, assume invalid keys. Could still be Twitter down...
try:
    tl = api.friends_timeline()
except tweepy.error.TweepError:
    logger.critical("API error trying to update. Are your keys valid? Is Twitter up?")
    print "Error trying to get tweets. Possible causes - invalid keys, Twitter has gone down..."
    sys.exit(3)

while 1:
    logger.debug("Processing %i tweets", len(tl))

    tl.reverse()
    for tweet in tl:
        new_date = tweet.created_at.strftime("%Y/%m/%d")
        if new_date != old_date:
            logger.info("Date changed from '%s' to '%s'", old_date, new_date)
            time_format = "%m/%d %H:%M:%S"
            old_date = new_date
        else:
            time_format = "      %H:%M:%S"
        text = "%s - %s: %s" % (tweet.created_at.strftime(time_format), tweet.user.screen_name, tweet.text)
        if options["text_wrap"] > 0:
            for line in w.wrap(text):
                print line
        else:
            print text
        last_id = tweet.id

    try:
        item = wakeup_queue.get(True, options["update_frequency"] * MINUTE)
        # If we reach this line we got a signal
        if hasattr(item, "__str__"):
            logger.info("Got signal %s", item.__str__())
        else:
            logger.info("Got signal, item has no string rep")
        logger.info("Reloading config file")
        load_config(logger)
        wakeup_queue.task_done()
    except Queue.Empty:
        # This is the usual case - timeout
        pass
    except KeyboardInterrupt:
        print "Ctrl-C detected"
        logger.warn("Ctrl-C detected")
        break

    logger.debug("Requesting tweets since %i", last_id)
    try:
        tl = api.friends_timeline(since_id=last_id, count=1000)
    except tweepy.error.TweepError:
        logger.warning("Got API error updating timeline; stalling to see if Twitter recovers.")
        tl = []

if options["catch_hup"]:
    # Restore old handler
    logger.debug("Restoring old HUP handler")
    signal.signal(signal.SIGHUP, old_handler)
